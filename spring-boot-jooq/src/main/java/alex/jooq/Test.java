/*
 * This file is generated by jOOQ.
 */
package alex.jooq;

import alex.jooq.tables.Customer;
import alex.jooq.tables.Person;
import alex.jooq.tables.QrtzBlobTriggers;
import alex.jooq.tables.QrtzCalendars;
import alex.jooq.tables.QrtzCronTriggers;
import alex.jooq.tables.QrtzFiredTriggers;
import alex.jooq.tables.QrtzJobDetails;
import alex.jooq.tables.QrtzLocks;
import alex.jooq.tables.QrtzPausedTriggerGrps;
import alex.jooq.tables.QrtzSchedulerState;
import alex.jooq.tables.QrtzSimpleTriggers;
import alex.jooq.tables.QrtzSimpropTriggers;
import alex.jooq.tables.QrtzTriggers;
import alex.jooq.tables.School;
import jakarta.annotation.Generated;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;

/** This class is generated by jOOQ. */
@Generated(
        value = {"http://www.jooq.org", "jOOQ version:3.10.7"},
        comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Test extends SchemaImpl {

    private static final long serialVersionUID = 617034087;

    /** The reference instance of <code>test</code> */
    public static final Test TEST = new Test();

    /** The table <code>test.customer</code>. */
    public final Customer CUSTOMER = Customer.CUSTOMER;

    /** The table <code>test.person</code>. */
    public final Person PERSON = Person.PERSON;

    /** The table <code>test.qrtz_blob_triggers</code>. */
    public final QrtzBlobTriggers QRTZ_BLOB_TRIGGERS = QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS;

    /** The table <code>test.qrtz_calendars</code>. */
    public final QrtzCalendars QRTZ_CALENDARS = QrtzCalendars.QRTZ_CALENDARS;

    /** The table <code>test.qrtz_cron_triggers</code>. */
    public final QrtzCronTriggers QRTZ_CRON_TRIGGERS = QrtzCronTriggers.QRTZ_CRON_TRIGGERS;

    /** The table <code>test.qrtz_fired_triggers</code>. */
    public final QrtzFiredTriggers QRTZ_FIRED_TRIGGERS = QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS;

    /** The table <code>test.qrtz_job_details</code>. */
    public final QrtzJobDetails QRTZ_JOB_DETAILS = QrtzJobDetails.QRTZ_JOB_DETAILS;

    /** The table <code>test.qrtz_locks</code>. */
    public final QrtzLocks QRTZ_LOCKS = QrtzLocks.QRTZ_LOCKS;

    /** The table <code>test.qrtz_paused_trigger_grps</code>. */
    public final QrtzPausedTriggerGrps QRTZ_PAUSED_TRIGGER_GRPS = QrtzPausedTriggerGrps.QRTZ_PAUSED_TRIGGER_GRPS;

    /** The table <code>test.qrtz_scheduler_state</code>. */
    public final QrtzSchedulerState QRTZ_SCHEDULER_STATE = QrtzSchedulerState.QRTZ_SCHEDULER_STATE;

    /** The table <code>test.qrtz_simple_triggers</code>. */
    public final QrtzSimpleTriggers QRTZ_SIMPLE_TRIGGERS = QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS;

    /** The table <code>test.qrtz_simprop_triggers</code>. */
    public final QrtzSimpropTriggers QRTZ_SIMPROP_TRIGGERS = QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS;

    /** The table <code>test.qrtz_triggers</code>. */
    public final QrtzTriggers QRTZ_TRIGGERS = QrtzTriggers.QRTZ_TRIGGERS;

    /** The table <code>test.school</code>. */
    public final School SCHOOL = School.SCHOOL;

    /** No further instances allowed */
    private Test() {
        super("test", null);
    }

    /** {@inheritDoc} */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
                Customer.CUSTOMER,
                Person.PERSON,
                QrtzBlobTriggers.QRTZ_BLOB_TRIGGERS,
                QrtzCalendars.QRTZ_CALENDARS,
                QrtzCronTriggers.QRTZ_CRON_TRIGGERS,
                QrtzFiredTriggers.QRTZ_FIRED_TRIGGERS,
                QrtzJobDetails.QRTZ_JOB_DETAILS,
                QrtzLocks.QRTZ_LOCKS,
                QrtzPausedTriggerGrps.QRTZ_PAUSED_TRIGGER_GRPS,
                QrtzSchedulerState.QRTZ_SCHEDULER_STATE,
                QrtzSimpleTriggers.QRTZ_SIMPLE_TRIGGERS,
                QrtzSimpropTriggers.QRTZ_SIMPROP_TRIGGERS,
                QrtzTriggers.QRTZ_TRIGGERS,
                School.SCHOOL);
    }
}
