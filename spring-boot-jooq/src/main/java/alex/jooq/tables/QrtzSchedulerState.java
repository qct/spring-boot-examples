/*
 * This file is generated by jOOQ.
 */
package alex.jooq.tables;

import alex.jooq.Indexes;
import alex.jooq.Keys;
import alex.jooq.Test;
import alex.jooq.tables.records.QrtzSchedulerStateRecord;
import jakarta.annotation.Generated;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@Generated(
        value = {"http://www.jooq.org", "jOOQ version:3.10.7"},
        comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class QrtzSchedulerState extends TableImpl<QrtzSchedulerStateRecord> {

    private static final long serialVersionUID = -816937211;

    /** The reference instance of <code>test.qrtz_scheduler_state</code> */
    public static final QrtzSchedulerState QRTZ_SCHEDULER_STATE = new QrtzSchedulerState();

    /** The class holding records for this type */
    @Override
    public Class<QrtzSchedulerStateRecord> getRecordType() {
        return QrtzSchedulerStateRecord.class;
    }

    /** The column <code>test.qrtz_scheduler_state.SCHED_NAME</code>. */
    public final TableField<QrtzSchedulerStateRecord, String> SCHED_NAME =
            createField("SCHED_NAME", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /** The column <code>test.qrtz_scheduler_state.INSTANCE_NAME</code>. */
    public final TableField<QrtzSchedulerStateRecord, String> INSTANCE_NAME =
            createField("INSTANCE_NAME", org.jooq.impl.SQLDataType.VARCHAR(190).nullable(false), this, "");

    /** The column <code>test.qrtz_scheduler_state.LAST_CHECKIN_TIME</code>. */
    public final TableField<QrtzSchedulerStateRecord, Long> LAST_CHECKIN_TIME =
            createField("LAST_CHECKIN_TIME", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /** The column <code>test.qrtz_scheduler_state.CHECKIN_INTERVAL</code>. */
    public final TableField<QrtzSchedulerStateRecord, Long> CHECKIN_INTERVAL =
            createField("CHECKIN_INTERVAL", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /** Create a <code>test.qrtz_scheduler_state</code> table reference */
    public QrtzSchedulerState() {
        this(DSL.name("qrtz_scheduler_state"), null);
    }

    /** Create an aliased <code>test.qrtz_scheduler_state</code> table reference */
    public QrtzSchedulerState(String alias) {
        this(DSL.name(alias), QRTZ_SCHEDULER_STATE);
    }

    /** Create an aliased <code>test.qrtz_scheduler_state</code> table reference */
    public QrtzSchedulerState(Name alias) {
        this(alias, QRTZ_SCHEDULER_STATE);
    }

    private QrtzSchedulerState(Name alias, Table<QrtzSchedulerStateRecord> aliased) {
        this(alias, aliased, null);
    }

    private QrtzSchedulerState(Name alias, Table<QrtzSchedulerStateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /** {@inheritDoc} */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /** {@inheritDoc} */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QRTZ_SCHEDULER_STATE_PRIMARY);
    }

    /** {@inheritDoc} */
    @Override
    public UniqueKey<QrtzSchedulerStateRecord> getPrimaryKey() {
        return Keys.KEY_QRTZ_SCHEDULER_STATE_PRIMARY;
    }

    /** {@inheritDoc} */
    @Override
    public List<UniqueKey<QrtzSchedulerStateRecord>> getKeys() {
        return Arrays.<UniqueKey<QrtzSchedulerStateRecord>>asList(Keys.KEY_QRTZ_SCHEDULER_STATE_PRIMARY);
    }

    /** {@inheritDoc} */
    @Override
    public QrtzSchedulerState as(String alias) {
        return new QrtzSchedulerState(DSL.name(alias), this);
    }

    /** {@inheritDoc} */
    @Override
    public QrtzSchedulerState as(Name alias) {
        return new QrtzSchedulerState(alias, this);
    }

    /** Rename this table */
    @Override
    public QrtzSchedulerState rename(String name) {
        return new QrtzSchedulerState(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public QrtzSchedulerState rename(Name name) {
        return new QrtzSchedulerState(name, null);
    }
}
