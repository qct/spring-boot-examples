/*
 * This file is generated by jOOQ.
 */
package alex.jooq.tables.records;

import alex.jooq.tables.Person;
import javax.annotation.Generated;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

/** This class is generated by jOOQ. */
@Generated(
        value = {"http://www.jooq.org", "jOOQ version:3.10.7"},
        comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PersonRecord extends UpdatableRecordImpl<PersonRecord>
        implements Record4<Integer, String, String, Integer> {

    private static final long serialVersionUID = 519925116;

    /** Setter for <code>test.person.id</code>. */
    public void setId(Integer value) {
        set(0, value);
    }

    /** Getter for <code>test.person.id</code>. */
    public Integer getId() {
        return (Integer) get(0);
    }

    /** Setter for <code>test.person.name</code>. */
    public void setName(String value) {
        set(1, value);
    }

    /** Getter for <code>test.person.name</code>. */
    public String getName() {
        return (String) get(1);
    }

    /** Setter for <code>test.person.address</code>. */
    public void setAddress(String value) {
        set(2, value);
    }

    /** Getter for <code>test.person.address</code>. */
    public String getAddress() {
        return (String) get(2);
    }

    /** Setter for <code>test.person.age</code>. */
    public void setAge(Integer value) {
        set(3, value);
    }

    /** Getter for <code>test.person.age</code>. */
    public Integer getAge() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /** {@inheritDoc} */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /** {@inheritDoc} */
    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /** {@inheritDoc} */
    @Override
    public Row4<Integer, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /** {@inheritDoc} */
    @Override
    public Field<Integer> field1() {
        return Person.PERSON.ID;
    }

    /** {@inheritDoc} */
    @Override
    public Field<String> field2() {
        return Person.PERSON.NAME;
    }

    /** {@inheritDoc} */
    @Override
    public Field<String> field3() {
        return Person.PERSON.ADDRESS;
    }

    /** {@inheritDoc} */
    @Override
    public Field<Integer> field4() {
        return Person.PERSON.AGE;
    }

    /** {@inheritDoc} */
    @Override
    public Integer component1() {
        return getId();
    }

    /** {@inheritDoc} */
    @Override
    public String component2() {
        return getName();
    }

    /** {@inheritDoc} */
    @Override
    public String component3() {
        return getAddress();
    }

    /** {@inheritDoc} */
    @Override
    public Integer component4() {
        return getAge();
    }

    /** {@inheritDoc} */
    @Override
    public Integer value1() {
        return getId();
    }

    /** {@inheritDoc} */
    @Override
    public String value2() {
        return getName();
    }

    /** {@inheritDoc} */
    @Override
    public String value3() {
        return getAddress();
    }

    /** {@inheritDoc} */
    @Override
    public Integer value4() {
        return getAge();
    }

    /** {@inheritDoc} */
    @Override
    public PersonRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PersonRecord value2(String value) {
        setName(value);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PersonRecord value3(String value) {
        setAddress(value);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PersonRecord value4(Integer value) {
        setAge(value);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public PersonRecord values(Integer value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /** Create a detached PersonRecord */
    public PersonRecord() {
        super(Person.PERSON);
    }

    /** Create a detached, initialised PersonRecord */
    public PersonRecord(Integer id, String name, String address, Integer age) {
        super(Person.PERSON);

        set(0, id);
        set(1, name);
        set(2, address);
        set(3, age);
    }
}
