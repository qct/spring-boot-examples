/*
 * This file is generated by jOOQ.
 */
package alex.jooq.tables;

import alex.jooq.Indexes;
import alex.jooq.Keys;
import alex.jooq.Test;
import alex.jooq.tables.records.CustomerRecord;
import jakarta.annotation.Generated;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@Generated(
        value = {"http://www.jooq.org", "jOOQ version:3.10.7"},
        comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Customer extends TableImpl<CustomerRecord> {

    private static final long serialVersionUID = 2040558882;

    /** The reference instance of <code>test.customer</code> */
    public static final Customer CUSTOMER = new Customer();

    /** The class holding records for this type */
    @Override
    public Class<CustomerRecord> getRecordType() {
        return CustomerRecord.class;
    }

    /** The column <code>test.customer.id</code>. */
    public final TableField<CustomerRecord, Long> ID =
            createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /** The column <code>test.customer.first_name</code>. */
    public final TableField<CustomerRecord, String> FIRST_NAME =
            createField("first_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /** The column <code>test.customer.last_name</code>. */
    public final TableField<CustomerRecord, String> LAST_NAME =
            createField("last_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /** Create a <code>test.customer</code> table reference */
    public Customer() {
        this(DSL.name("customer"), null);
    }

    /** Create an aliased <code>test.customer</code> table reference */
    public Customer(String alias) {
        this(DSL.name(alias), CUSTOMER);
    }

    /** Create an aliased <code>test.customer</code> table reference */
    public Customer(Name alias) {
        this(alias, CUSTOMER);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /** {@inheritDoc} */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /** {@inheritDoc} */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMER_PRIMARY);
    }

    /** {@inheritDoc} */
    @Override
    public Identity<CustomerRecord, Long> getIdentity() {
        return Keys.IDENTITY_CUSTOMER;
    }

    /** {@inheritDoc} */
    @Override
    public UniqueKey<CustomerRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMER_PRIMARY;
    }

    /** {@inheritDoc} */
    @Override
    public List<UniqueKey<CustomerRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerRecord>>asList(Keys.KEY_CUSTOMER_PRIMARY);
    }

    /** {@inheritDoc} */
    @Override
    public Customer as(String alias) {
        return new Customer(DSL.name(alias), this);
    }

    /** {@inheritDoc} */
    @Override
    public Customer as(Name alias) {
        return new Customer(alias, this);
    }

    /** Rename this table */
    @Override
    public Customer rename(String name) {
        return new Customer(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public Customer rename(Name name) {
        return new Customer(name, null);
    }
}
