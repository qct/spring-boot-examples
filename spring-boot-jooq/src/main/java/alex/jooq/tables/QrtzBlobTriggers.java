/*
 * This file is generated by jOOQ.
 */
package alex.jooq.tables;

import alex.jooq.Indexes;
import alex.jooq.Keys;
import alex.jooq.Test;
import alex.jooq.tables.records.QrtzBlobTriggersRecord;
import java.util.Arrays;
import java.util.List;
import jakarta.annotation.Generated;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/** This class is generated by jOOQ. */
@Generated(
        value = {"http://www.jooq.org", "jOOQ version:3.10.7"},
        comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class QrtzBlobTriggers extends TableImpl<QrtzBlobTriggersRecord> {

    private static final long serialVersionUID = -802259274;

    /** The reference instance of <code>test.qrtz_blob_triggers</code> */
    public static final QrtzBlobTriggers QRTZ_BLOB_TRIGGERS = new QrtzBlobTriggers();

    /** The class holding records for this type */
    @Override
    public Class<QrtzBlobTriggersRecord> getRecordType() {
        return QrtzBlobTriggersRecord.class;
    }

    /** The column <code>test.qrtz_blob_triggers.SCHED_NAME</code>. */
    public final TableField<QrtzBlobTriggersRecord, String> SCHED_NAME =
            createField("SCHED_NAME", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /** The column <code>test.qrtz_blob_triggers.TRIGGER_NAME</code>. */
    public final TableField<QrtzBlobTriggersRecord, String> TRIGGER_NAME =
            createField("TRIGGER_NAME", org.jooq.impl.SQLDataType.VARCHAR(190).nullable(false), this, "");

    /** The column <code>test.qrtz_blob_triggers.TRIGGER_GROUP</code>. */
    public final TableField<QrtzBlobTriggersRecord, String> TRIGGER_GROUP =
            createField("TRIGGER_GROUP", org.jooq.impl.SQLDataType.VARCHAR(190).nullable(false), this, "");

    /** The column <code>test.qrtz_blob_triggers.BLOB_DATA</code>. */
    public final TableField<QrtzBlobTriggersRecord, byte[]> BLOB_DATA =
            createField("BLOB_DATA", org.jooq.impl.SQLDataType.BLOB, this, "");

    /** Create a <code>test.qrtz_blob_triggers</code> table reference */
    public QrtzBlobTriggers() {
        this(DSL.name("qrtz_blob_triggers"), null);
    }

    /** Create an aliased <code>test.qrtz_blob_triggers</code> table reference */
    public QrtzBlobTriggers(String alias) {
        this(DSL.name(alias), QRTZ_BLOB_TRIGGERS);
    }

    /** Create an aliased <code>test.qrtz_blob_triggers</code> table reference */
    public QrtzBlobTriggers(Name alias) {
        this(alias, QRTZ_BLOB_TRIGGERS);
    }

    private QrtzBlobTriggers(Name alias, Table<QrtzBlobTriggersRecord> aliased) {
        this(alias, aliased, null);
    }

    private QrtzBlobTriggers(Name alias, Table<QrtzBlobTriggersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /** {@inheritDoc} */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /** {@inheritDoc} */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QRTZ_BLOB_TRIGGERS_PRIMARY, Indexes.QRTZ_BLOB_TRIGGERS_SCHED_NAME);
    }

    /** {@inheritDoc} */
    @Override
    public UniqueKey<QrtzBlobTriggersRecord> getPrimaryKey() {
        return Keys.KEY_QRTZ_BLOB_TRIGGERS_PRIMARY;
    }

    /** {@inheritDoc} */
    @Override
    public List<UniqueKey<QrtzBlobTriggersRecord>> getKeys() {
        return Arrays.<UniqueKey<QrtzBlobTriggersRecord>>asList(Keys.KEY_QRTZ_BLOB_TRIGGERS_PRIMARY);
    }

    /** {@inheritDoc} */
    @Override
    public List<ForeignKey<QrtzBlobTriggersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QrtzBlobTriggersRecord, ?>>asList(Keys.QRTZ_BLOB_TRIGGERS_IBFK_1);
    }

    /** {@inheritDoc} */
    @Override
    public QrtzBlobTriggers as(String alias) {
        return new QrtzBlobTriggers(DSL.name(alias), this);
    }

    /** {@inheritDoc} */
    @Override
    public QrtzBlobTriggers as(Name alias) {
        return new QrtzBlobTriggers(alias, this);
    }

    /** Rename this table */
    @Override
    public QrtzBlobTriggers rename(String name) {
        return new QrtzBlobTriggers(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public QrtzBlobTriggers rename(Name name) {
        return new QrtzBlobTriggers(name, null);
    }
}
